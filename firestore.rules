rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isDriver() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/drivers/$(request.auth.uid));
    }
    
    // Helper function to check if admins collection is empty
    function isFirstAdmin() {
      return !exists(/databases/$(database)/documents/admins/admin_sentinel);
    }

    // Cases collection rules
    match /cases/{caseId} {
      // Allow read if user is admin or if the case belongs to the authenticated driver
      allow read: if isAdmin() || 
        (isDriver() && resource.data.driverId == request.auth.uid);
      
      // Allow create if user is authenticated driver
      allow create: if isDriver();
      
      // Allow update if user is admin or if it's the case owner (driver)
      allow update: if isAdmin() || 
        (isDriver() && resource.data.driverId == request.auth.uid);
    }

    // Case messages subcollection
    match /cases/{caseId}/messages/{messageId} {
      // Allow read if user is admin or if the parent case belongs to the authenticated driver
      allow read: if isAdmin() || 
        (isDriver() && get(/databases/$(database)/documents/cases/$(caseId)).data.driverId == request.auth.uid);
      
      // Allow create if user is admin or if the parent case belongs to the authenticated driver
      allow create: if isAdmin() || 
        (isDriver() && get(/databases/$(database)/documents/cases/$(caseId)).data.driverId == request.auth.uid);
    }

    // Pending drivers collection
    match /pendingDrivers/{userId} {
      allow read: if isAdmin() || request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAdmin();
    }
    
    // Drivers collection
    match /drivers/{userId} {
      allow read: if isAdmin() || request.auth.uid == userId;
      allow write: if isAdmin();
    }
    
    // Admins collection
    match /admins/{userId} {
      // Allow creating first admin, then restrict to existing admins
      allow create: if isAuthenticated() && 
                      request.auth.uid == userId && 
                      (isFirstAdmin() || isAdmin());
      allow read: if request.auth.uid == userId;
      allow write: if isAdmin(); // Only existing admins can modify
    }

    // Sentinel document for admin initialization
    match /admins/admin_sentinel {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isFirstAdmin();
      allow write: if isAdmin();
    }
  }
} 